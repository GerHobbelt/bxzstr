/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 *
 * This file is a part of bxzstr (https://github.com/tmaklin/bxzstr)
 * Written by Tommi MÃ¤klin (tommi@maklin.fi) */

#ifndef BXZSTR_TEST_LZMA_STREAM_WRAPPER_HPP
#define BXZSTR_TEST_LZMA_STREAM_WRAPPER_HPP

#include <string>
#include <fstream>

#include "gtest/gtest.h"

#include "bxzstr.hpp"

// Integration tests for lzma_stream_wrapper
//
// Decompression
class LzmaDecompressionTest : public ::testing::Test {
  protected:
    void SetUp() override {
	// Fake lzma data with 10 1s on their own lines
	const unsigned char test[] = { 0xfd, 0x37, 0x7a, 0x58, 0x5a, 0x00, 0x00, 0x04, 0xe6, 0xd6, 0xb4, 0x46, 0x02, 0x00, 0x21, 0x01,
	                               0x16, 0x00, 0x00, 0x00, 0x74, 0x2f, 0xe5, 0xa3, 0xe0, 0x00, 0x13, 0x00, 0x08, 0x5d, 0x00, 0x18,
				       0x82, 0xa7, 0x83, 0x80, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x65, 0xdc, 0x8f, 0x27, 0x35, 0xda, 0x98,
				       0x00, 0x01, 0x24, 0x14, 0xf0, 0x80, 0xb4, 0xcb, 0x1f, 0xb6, 0xf3, 0x7d, 0x01, 0x00, 0x00, 0x00,
				       0x00, 0x04, 0x59, 0x5a};

	this->testInFile = "LzmaDecompressionTest_fake_data.txt.xz";
	std::ofstream of(testInFile);
	for (uint32_t i = 0; i < 68; ++i) {
	    of << test[i];
	}
	of.close();

	this->nInVals = 10;
	this->expected = std::vector<char>(nInVals, '1');
    }
    void TearDown() override {
    }
    // Test values
    std::string testInFile;
    uint32_t nInVals;
    std::vector<char> expected;
};

// Compression
class LzmaCompressionTest : public ::testing::Test {
  protected:
    void SetUp() override {
	// Raw data from running bxz::ofstream with bxz::bz2 for this test set
	const unsigned char test[] = { 0xfd, 0x37, 0x7a, 0x58, 0x5a, 0x00, 0x00, 0x04, 0xe6, 0xd6, 0xb4, 0x46, 0x02, 0x00, 0x21, 0x01,
	                               0x16, 0x00, 0x00, 0x00, 0x74, 0x2f, 0xe5, 0xa3, 0xe0, 0x00, 0x12, 0x00, 0x07, 0x5d, 0x00, 0x18,
				       0x82, 0xa7, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x5f, 0xfe, 0x41, 0x33, 0xb3, 0xaf, 0x49,
				       0x00, 0x01, 0x23, 0x13, 0x94, 0x83, 0x91, 0x1a, 0x1f, 0xb6, 0xf3, 0x7d, 0x01, 0x00, 0x00, 0x00,
				       0x00, 0x04, 0x59, 0x5a, 0xfd, 0x37, 0x7a, 0x58, 0x5a, 0x00, 0x00, 0x04, 0xe6, 0xd6, 0xb4, 0x46,
				       0x00, 0x00, 0x00, 0x00, 0x1c, 0xdf, 0x44, 0x21, 0x1f, 0xb6, 0xf3, 0x7d, 0x01, 0x00, 0x00, 0x00,
				       0x00, 0x04, 0x59, 0x5a };

	this->testOutFile = "LzmaCompressionTest_fake_data.txt.xz";
	this->nOutVals = 10;
	this->expected = std::vector<char>(100);

	bxz::ofstream out(testOutFile, bxz::lzma);
	for (uint32_t i = 0; i < nOutVals; ++i) {
	    out << 1;
	    if (i < nOutVals - 1)
		out << '\n';
	}
	out.flush();

	for (uint32_t i = 0; i < 100; ++i) {
	    expected[i] = test[i];
	}
    }
    void TearDown() override {
    }
    // Test values
    std::string testOutFile;
    uint32_t nOutVals;
    std::vector<char> expected;
};

#endif
